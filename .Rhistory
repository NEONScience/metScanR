## View the LOV
View(lov_verify[[1]])
# CTRL + ALT + C runs all code within a chunk
library(knitr)
library(kfigr)
library(httr)
library(plyr) # possibly use to cast children$form_values to a single data frame
library(dplyr)
library(tidyjson) # https://github.com/sailthru/tidyjson
library(jsonlite) # https://cran.r-project.org/web/packages/jsonlite/vignettes/json-aaquickstart.html
library(rJava)
library(xlsxjars)
#Set working directory and file paths
rm(list=ls())
options(stringsAsFactors = FALSE)
########################## EDIT THESE PATHS FOR YOUR OUTPUT FOLDER AND INPUT INGEST WORKBOOK ##########################
########################## EDIT THESE PATHS FOR YOUR OUTPUT FOLDER AND INPUT INGEST WORKBOOK ##########################
########################## EDIT THESE PATHS FOR YOUR OUTPUT FOLDER AND INPUT INGEST WORKBOOK ##########################
## Specify output file path
## Specify input ingest workbook file
if (file.exists(
"c:/Users/rregan")){
path_output <- "c:/Users/rregan/Desktop/FulcrumGit/devTOS/fulcrum/integration_tests/smammals"
path_devTOS <- "C:/Users/rregan/Desktop/FulcrumGit/devTOS"
}
if (file.exists(
"C:/Users/nrobinson")){
path_output <- "C:/Users/nrobinson/Desktop/MyDocuments/NEON_Git/devTOS/fulcrum/integration_tests/smammals"
path_devTOS <- "C:/Users/nrobinson/Desktop/MyDocuments/NEON_Git/devTOS"
}
if (file.exists(
"C:/Users/cflagg")){
path_output <- "C:/Users/cflagg/Documents/GitHub/devTOS/fulcrum/integration_tests/herbaceousclip"
path_devTOS <- "C:/Users/cflagg/Documents/GitHub/devTOS"
path_organismal <- "C:/Users/cflagg/Documents/GitHub/organismalIPT"
}
if (file.exists(
"C:/Users/kcawley")){
path_output <- "C:/Users/kcawley/Documents/GitHub/devTOS/fulcrum/integration_tests/smammals"
path_devTOS <- "C:/Users/kcawley/Documents/GitHub/devTOS"
}
# The ____folder name____ inside integration_tests
ingestWB <- read.delim(paste0(path_organismal,"/herbiomass/defData/hbp_dataingest_NEON.DOC.001920.txt"), header = TRUE)
############## EDIT THESE CHARACTER VECTORS TO MATCH YOUR INGEST WORKBOOK NAME, FULCRM IDS, AND INGEST TABLE NAMES #######
############## EDIT THESE CHARACTER VECTORS TO MATCH YOUR INGEST WORKBOOK NAME, FULCRM IDS, AND INGEST TABLE NAMES #######
############## EDIT THESE CHARACTER VECTORS TO MATCH YOUR INGEST WORKBOOK NAME, FULCRM IDS, AND INGEST TABLE NAMES #######
###### specify fulcrum form_ids and ingest table names
# this should match the name of the ingest workbook .txt file
wbName <- c(rep("hbp_dataingest_NEON.DOC.001920"))
# this should match the names of the ingest workbook tables
tableName <- c("hbp_perbout_in", "hbp_massdata_in")
# this should match the fulcrum form_id of the apps that are INGESTED (apps that are not ingested should not be referenced here)
form_ids <- c("18cac2c7-5bbd-4f6b-aae4-331bba3ed824", "30d81bc2-6fac-4346-a22c-60f6f0b13e52")
# this data.frame gets passed to the intcheck() function
workbookLocations <- data.frame(form_ids = c(form_ids),
wbName = wbName,
tableName = tableName)
################# EDIT THESE PATHS TO YOUR devTOS Fulcrum Folder -- source files contain functions #################
# Assign current ingestWB headers
source(paste(path_devTOS, "workbookWorkflow/checkAndPrintWB.R", sep = "/"))
# All API functions
source(paste(path_devTOS, "fulcrum/R_scripts/app_check.R", sep = "/")) ## functions that interact with the API
source(paste(path_devTOS, "fulcrum/R_scripts/integration_check.R", sep = "/")) ## functions that verify ingest workbook data
# check for case that path_output is not defined properly...
if ( ! exists("path_output")){ stop('path_output is not defined')}
# Grab the list of values from Christine's Shiny app -- this gets referenced by a function in 'integration_check'
lov <- read.csv(paste(path_output, "DPS_LOV_list_20170118.171150.csv", sep = "/"),
header = T, stringsAsFactors = F)
### JUST RUN THIS
api_token <- "f68fd4db05c32933b94e1760104cfdaa01eda4956c883943ab9fe55f2fb99313"
## intcheck does the following: (1) check and set global LOAD_ID/LOAD_STATUS JSON key, (2) maps the parserPaths, (3) checks the LOV
## (4) writes a new file with parserPaths for each ingest table ("withFulcrumKeys.txt")
ingesttables <- intcheck(input_df = workbookLocations, api_token, ingestWB, path_output, FALSE) # returns a list
## this will give you all of the LOV values listed in the ingest workbook -- currently does not check if LOVs are present in form schema
## the 'valid' column lists what the valid value is based on the Shiny app
## TODO: CURRENTLY DOESNT VERIFY IF THE APP LOV IS CORRECT, JUST LISTS THE LOV
lov_verify <- lovcheck(input_df = workbookLocations, api_token, ingestWB, path_output, FALSE, lov = lov)  # returns a list
# Collapse the list >> combine the separate files into one file
combined <- plyr::ldply(ingesttables)
# this re-combines all of the ingest tables into one file
write.table(combined, file = paste(path_output, "combined_ingest_withKeys.txt", sep = "/"),col.names=T, row.names=F, quote=T, na="",sep="\t",fileEncoding = "UTF-8")
# are any fields missing a parserPath?
missingFields <- dplyr::filter(combined, is.na(parserPath), fieldName != "uid") %>% select(table,fieldName, parserToCreate, entryValidationRulesParser, entryValidationRulesForm, entryLabelIfDifferentFromFieldName,parserPath)
# View it
View(missingFields)
## View the LOV
View(lov_verify[[1]])
# CTRL + ALT + C runs all code within a chunk
library(knitr)
library(kfigr)
library(httr)
library(plyr) # possibly use to cast children$form_values to a single data frame
library(dplyr)
library(tidyjson) # https://github.com/sailthru/tidyjson
library(jsonlite) # https://cran.r-project.org/web/packages/jsonlite/vignettes/json-aaquickstart.html
library(rJava)
library(xlsxjars)
#Set working directory and file paths
rm(list=ls())
options(stringsAsFactors = FALSE)
########################## EDIT THESE PATHS FOR YOUR OUTPUT FOLDER AND INPUT INGEST WORKBOOK ##########################
########################## EDIT THESE PATHS FOR YOUR OUTPUT FOLDER AND INPUT INGEST WORKBOOK ##########################
########################## EDIT THESE PATHS FOR YOUR OUTPUT FOLDER AND INPUT INGEST WORKBOOK ##########################
## Specify output file path
## Specify input ingest workbook file
if (file.exists(
"c:/Users/rregan")){
path_output <- "c:/Users/rregan/Desktop/FulcrumGit/devTOS/fulcrum/integration_tests/smammals"
path_devTOS <- "C:/Users/rregan/Desktop/FulcrumGit/devTOS"
}
if (file.exists(
"C:/Users/nrobinson")){
path_output <- "C:/Users/nrobinson/Desktop/MyDocuments/NEON_Git/devTOS/fulcrum/integration_tests/smammals"
path_devTOS <- "C:/Users/nrobinson/Desktop/MyDocuments/NEON_Git/devTOS"
}
if (file.exists(
"C:/Users/cflagg")){
path_output <- "C:/Users/cflagg/Documents/GitHub/devTOS/fulcrum/integration_tests/herbaceousclip"
path_devTOS <- "C:/Users/cflagg/Documents/GitHub/devTOS"
path_organismal <- "C:/Users/cflagg/Documents/GitHub/organismalIPT"
}
if (file.exists(
"C:/Users/kcawley")){
path_output <- "C:/Users/kcawley/Documents/GitHub/devTOS/fulcrum/integration_tests/smammals"
path_devTOS <- "C:/Users/kcawley/Documents/GitHub/devTOS"
}
# The ____folder name____ inside integration_tests
ingestWB <- read.delim(paste0(path_organismal,"/herbiomass/defData/hbp_dataingest_NEON.DOC.001920.txt"), header = TRUE)
############## EDIT THESE CHARACTER VECTORS TO MATCH YOUR INGEST WORKBOOK NAME, FULCRM IDS, AND INGEST TABLE NAMES #######
############## EDIT THESE CHARACTER VECTORS TO MATCH YOUR INGEST WORKBOOK NAME, FULCRM IDS, AND INGEST TABLE NAMES #######
############## EDIT THESE CHARACTER VECTORS TO MATCH YOUR INGEST WORKBOOK NAME, FULCRM IDS, AND INGEST TABLE NAMES #######
###### specify fulcrum form_ids and ingest table names
# this should match the name of the ingest workbook .txt file
wbName <- c(rep("hbp_dataingest_NEON.DOC.001920"))
# this should match the names of the ingest workbook tables
tableName <- c("hbp_perbout_in", "hbp_massdata_in")
# this should match the fulcrum form_id of the apps that are INGESTED (apps that are not ingested should not be referenced here)
form_ids <- c("18cac2c7-5bbd-4f6b-aae4-331bba3ed824", "30d81bc2-6fac-4346-a22c-60f6f0b13e52")
# this data.frame gets passed to the intcheck() function
workbookLocations <- data.frame(form_ids = c(form_ids),
wbName = wbName,
tableName = tableName)
################# EDIT THESE PATHS TO YOUR devTOS Fulcrum Folder -- source files contain functions #################
# Assign current ingestWB headers
source(paste(path_devTOS, "workbookWorkflow/checkAndPrintWB.R", sep = "/"))
# All API functions
source(paste(path_devTOS, "fulcrum/R_scripts/app_check.R", sep = "/")) ## functions that interact with the API
source(paste(path_devTOS, "fulcrum/R_scripts/integration_check.R", sep = "/")) ## functions that verify ingest workbook data
# check for case that path_output is not defined properly...
if ( ! exists("path_output")){ stop('path_output is not defined')}
# Grab the list of values from Christine's Shiny app -- this gets referenced by a function in 'integration_check'
lov <- read.csv(paste(path_output, "DPS_LOV_list_20170118.171150.csv", sep = "/"),
header = T, stringsAsFactors = F)
### JUST RUN THIS
api_token <- "f68fd4db05c32933b94e1760104cfdaa01eda4956c883943ab9fe55f2fb99313"
## intcheck does the following: (1) check and set global LOAD_ID/LOAD_STATUS JSON key, (2) maps the parserPaths, (3) checks the LOV
## (4) writes a new file with parserPaths for each ingest table ("withFulcrumKeys.txt")
ingesttables <- intcheck(input_df = workbookLocations, api_token, ingestWB, path_output, FALSE) # returns a list
## this will give you all of the LOV values listed in the ingest workbook -- currently does not check if LOVs are present in form schema
## the 'valid' column lists what the valid value is based on the Shiny app
## TODO: CURRENTLY DOESNT VERIFY IF THE APP LOV IS CORRECT, JUST LISTS THE LOV
lov_verify <- lovcheck(input_df = workbookLocations, api_token, ingestWB, path_output, FALSE, lov = lov)  # returns a list
# Collapse the list >> combine the separate files into one file
combined <- plyr::ldply(ingesttables)
# this re-combines all of the ingest tables into one file
write.table(combined, file = paste(path_output, "combined_ingest_withKeys.txt", sep = "/"),col.names=T, row.names=F, quote=T, na="",sep="\t",fileEncoding = "UTF-8")
# are any fields missing a parserPath?
missingFields <- dplyr::filter(combined, is.na(parserPath), fieldName != "uid") %>% select(table,fieldName, parserToCreate, entryValidationRulesParser, entryValidationRulesForm, entryLabelIfDifferentFromFieldName,parserPath)
# View it
View(missingFields)
## View the LOV
View(lov_verify[[1]])
# CTRL + ALT + C runs all code within a chunk
library(knitr)
library(kfigr)
library(httr)
library(plyr) # possibly use to cast children$form_values to a single data frame
library(dplyr)
library(tidyjson) # https://github.com/sailthru/tidyjson
library(jsonlite) # https://cran.r-project.org/web/packages/jsonlite/vignettes/json-aaquickstart.html
library(rJava)
library(xlsxjars)
#Set working directory and file paths
rm(list=ls())
options(stringsAsFactors = FALSE)
########################## EDIT THESE PATHS FOR YOUR OUTPUT FOLDER AND INPUT INGEST WORKBOOK ##########################
########################## EDIT THESE PATHS FOR YOUR OUTPUT FOLDER AND INPUT INGEST WORKBOOK ##########################
########################## EDIT THESE PATHS FOR YOUR OUTPUT FOLDER AND INPUT INGEST WORKBOOK ##########################
## Specify output file path
## Specify input ingest workbook file
if (file.exists(
"c:/Users/rregan")){
path_output <- "c:/Users/rregan/Desktop/FulcrumGit/devTOS/fulcrum/integration_tests/smammals"
path_devTOS <- "C:/Users/rregan/Desktop/FulcrumGit/devTOS"
}
if (file.exists(
"C:/Users/nrobinson")){
path_output <- "C:/Users/nrobinson/Desktop/MyDocuments/NEON_Git/devTOS/fulcrum/integration_tests/smammals"
path_devTOS <- "C:/Users/nrobinson/Desktop/MyDocuments/NEON_Git/devTOS"
}
if (file.exists(
"C:/Users/cflagg")){
path_output <- "C:/Users/cflagg/Documents/GitHub/devTOS/fulcrum/integration_tests/herbaceousclip"
path_devTOS <- "C:/Users/cflagg/Documents/GitHub/devTOS"
path_organismal <- "C:/Users/cflagg/Documents/GitHub/organismalIPT"
}
if (file.exists(
"C:/Users/kcawley")){
path_output <- "C:/Users/kcawley/Documents/GitHub/devTOS/fulcrum/integration_tests/smammals"
path_devTOS <- "C:/Users/kcawley/Documents/GitHub/devTOS"
}
# The ____folder name____ inside integration_tests
ingestWB <- read.delim(paste0(path_organismal,"/herbiomass/defData/hbp_dataingest_NEON.DOC.001920.txt"), header = TRUE)
############## EDIT THESE CHARACTER VECTORS TO MATCH YOUR INGEST WORKBOOK NAME, FULCRM IDS, AND INGEST TABLE NAMES #######
############## EDIT THESE CHARACTER VECTORS TO MATCH YOUR INGEST WORKBOOK NAME, FULCRM IDS, AND INGEST TABLE NAMES #######
############## EDIT THESE CHARACTER VECTORS TO MATCH YOUR INGEST WORKBOOK NAME, FULCRM IDS, AND INGEST TABLE NAMES #######
###### specify fulcrum form_ids and ingest table names
# this should match the name of the ingest workbook .txt file
wbName <- c(rep("hbp_dataingest_NEON.DOC.001920"))
# this should match the names of the ingest workbook tables
tableName <- c("hbp_perbout_in", "hbp_massdata_in")
# this should match the fulcrum form_id of the apps that are INGESTED (apps that are not ingested should not be referenced here)
form_ids <- c("18cac2c7-5bbd-4f6b-aae4-331bba3ed824", "30d81bc2-6fac-4346-a22c-60f6f0b13e52")
# this data.frame gets passed to the intcheck() function
workbookLocations <- data.frame(form_ids = c(form_ids),
wbName = wbName,
tableName = tableName)
################# EDIT THESE PATHS TO YOUR devTOS Fulcrum Folder -- source files contain functions #################
# Assign current ingestWB headers
source(paste(path_devTOS, "workbookWorkflow/checkAndPrintWB.R", sep = "/"))
# All API functions
source(paste(path_devTOS, "fulcrum/R_scripts/app_check.R", sep = "/")) ## functions that interact with the API
source(paste(path_devTOS, "fulcrum/R_scripts/integration_check.R", sep = "/")) ## functions that verify ingest workbook data
# check for case that path_output is not defined properly...
if ( ! exists("path_output")){ stop('path_output is not defined')}
# Grab the list of values from Christine's Shiny app -- this gets referenced by a function in 'integration_check'
lov <- read.csv(paste(path_output, "DPS_LOV_list_20170118.171150.csv", sep = "/"),
header = T, stringsAsFactors = F)
### JUST RUN THIS
api_token <- "f68fd4db05c32933b94e1760104cfdaa01eda4956c883943ab9fe55f2fb99313"
## intcheck does the following: (1) check and set global LOAD_ID/LOAD_STATUS JSON key, (2) maps the parserPaths, (3) checks the LOV
## (4) writes a new file with parserPaths for each ingest table ("withFulcrumKeys.txt")
ingesttables <- intcheck(input_df = workbookLocations, api_token, ingestWB, path_output, FALSE) # returns a list
## this will give you all of the LOV values listed in the ingest workbook -- currently does not check if LOVs are present in form schema
## the 'valid' column lists what the valid value is based on the Shiny app
## TODO: CURRENTLY DOESNT VERIFY IF THE APP LOV IS CORRECT, JUST LISTS THE LOV
lov_verify <- lovcheck(input_df = workbookLocations, api_token, ingestWB, path_output, FALSE, lov = lov)  # returns a list
# Collapse the list >> combine the separate files into one file
combined <- plyr::ldply(ingesttables)
# this re-combines all of the ingest tables into one file
write.table(combined, file = paste(path_output, "combined_ingest_withKeys.txt", sep = "/"),col.names=T, row.names=F, quote=T, na="",sep="\t",fileEncoding = "UTF-8")
# are any fields missing a parserPath?
missingFields <- dplyr::filter(combined, is.na(parserPath), fieldName != "uid") %>% select(table,fieldName, parserToCreate, entryValidationRulesParser, entryValidationRulesForm, entryLabelIfDifferentFromFieldName,parserPath)
# View it
View(missingFields)
## View the LOV
View(lov_verify[[1]])
# CTRL + ALT + C runs all code within a chunk
library(knitr)
library(kfigr)
library(httr)
library(plyr) # possibly use to cast children$form_values to a single data frame
library(dplyr)
library(tidyjson) # https://github.com/sailthru/tidyjson
library(jsonlite) # https://cran.r-project.org/web/packages/jsonlite/vignettes/json-aaquickstart.html
library(rJava)
library(xlsxjars)
#Set working directory and file paths
rm(list=ls())
options(stringsAsFactors = FALSE)
########################## EDIT THESE PATHS FOR YOUR OUTPUT FOLDER AND INPUT INGEST WORKBOOK ##########################
########################## EDIT THESE PATHS FOR YOUR OUTPUT FOLDER AND INPUT INGEST WORKBOOK ##########################
########################## EDIT THESE PATHS FOR YOUR OUTPUT FOLDER AND INPUT INGEST WORKBOOK ##########################
## Specify output file path
## Specify input ingest workbook file
if (file.exists(
"c:/Users/rregan")){
path_output <- "c:/Users/rregan/Desktop/FulcrumGit/devTOS/fulcrum/integration_tests/smammals"
path_devTOS <- "C:/Users/rregan/Desktop/FulcrumGit/devTOS"
}
if (file.exists(
"C:/Users/nrobinson")){
path_output <- "C:/Users/nrobinson/Desktop/MyDocuments/NEON_Git/devTOS/fulcrum/integration_tests/smammals"
path_devTOS <- "C:/Users/nrobinson/Desktop/MyDocuments/NEON_Git/devTOS"
}
if (file.exists(
"C:/Users/cflagg")){
path_output <- "C:/Users/cflagg/Documents/GitHub/devTOS/fulcrum/integration_tests/phenology"
path_devTOS <- "C:/Users/cflagg/Documents/GitHub/devTOS"
path_organismal <- "C:/Users/cflagg/Documents/GitHub/organismalIPT"
}
if (file.exists(
"C:/Users/kcawley")){
path_output <- "C:/Users/kcawley/Documents/GitHub/devTOS/fulcrum/integration_tests/smammals"
path_devTOS <- "C:/Users/kcawley/Documents/GitHub/devTOS"
}
# The ____folder name____ inside integration_tests
ingestWB <- read.delim(paste0(path_organismal,"/phenology/defData/phe_dataingest_NEONDOC001408.txt"), header = TRUE)
############## EDIT THESE CHARACTER VECTORS TO MATCH YOUR INGEST WORKBOOK NAME, FULCRM IDS, AND INGEST TABLE NAMES #######
############## EDIT THESE CHARACTER VECTORS TO MATCH YOUR INGEST WORKBOOK NAME, FULCRM IDS, AND INGEST TABLE NAMES #######
############## EDIT THESE CHARACTER VECTORS TO MATCH YOUR INGEST WORKBOOK NAME, FULCRM IDS, AND INGEST TABLE NAMES #######
###### specify fulcrum form_ids and ingest table names
# this should match the name of the ingest workbook .txt file
wbName <- c(rep("phe_dataingest_NEONDOC001408"))
# this should match the names of the ingest workbook tables
tableName <- c("phe_perindividual_in", "phe_statusintensity_in")
# this should match the fulcrum form_id of the apps that are INGESTED (apps that are not ingested should not be referenced here)
form_ids <- c("18cac2c7-5bbd-4f6b-aae4-331bba3ed824", "30d81bc2-6fac-4346-a22c-60f6f0b13e52")
# this data.frame gets passed to the intcheck() function
workbookLocations <- data.frame(form_ids = c(form_ids),
wbName = wbName,
tableName = tableName)
################# EDIT THESE PATHS TO YOUR devTOS Fulcrum Folder -- source files contain functions #################
# Assign current ingestWB headers
source(paste(path_devTOS, "workbookWorkflow/checkAndPrintWB.R", sep = "/"))
# All API functions
source(paste(path_devTOS, "fulcrum/R_scripts/app_check.R", sep = "/")) ## functions that interact with the API
source(paste(path_devTOS, "fulcrum/R_scripts/integration_check.R", sep = "/")) ## functions that verify ingest workbook data
# check for case that path_output is not defined properly...
if ( ! exists("path_output")){ stop('path_output is not defined')}
# Grab the list of values from Christine's Shiny app -- this gets referenced by a function in 'integration_check'
lov <- read.csv(paste(path_output, "DPS_LOV_list_20170118.171150.csv", sep = "/"),
header = T, stringsAsFactors = F)
### JUST RUN THIS
api_token <- "f68fd4db05c32933b94e1760104cfdaa01eda4956c883943ab9fe55f2fb99313"
## intcheck does the following: (1) check and set global LOAD_ID/LOAD_STATUS JSON key, (2) maps the parserPaths, (3) checks the LOV
## (4) writes a new file with parserPaths for each ingest table ("withFulcrumKeys.txt")
ingesttables <- intcheck(input_df = workbookLocations, api_token, ingestWB, path_output, FALSE) # returns a list
## this will give you all of the LOV values listed in the ingest workbook -- currently does not check if LOVs are present in form schema
## the 'valid' column lists what the valid value is based on the Shiny app
## TODO: CURRENTLY DOESNT VERIFY IF THE APP LOV IS CORRECT, JUST LISTS THE LOV
lov_verify <- lovcheck(input_df = workbookLocations, api_token, ingestWB, path_output, FALSE, lov = lov)  # returns a list
# Collapse the list >> combine the separate files into one file
combined <- plyr::ldply(ingesttables)
# this re-combines all of the ingest tables into one file
write.table(combined, file = paste(path_output, "combined_ingest_withKeys.txt", sep = "/"),col.names=T, row.names=F, quote=T, na="",sep="\t",fileEncoding = "UTF-8")
# are any fields missing a parserPath?
missingFields <- dplyr::filter(combined, is.na(parserPath), fieldName != "uid") %>% select(table,fieldName, parserToCreate, entryValidationRulesParser, entryValidationRulesForm, entryLabelIfDifferentFromFieldName,parserPath)
# View it
View(missingFields)
## View the LOV
View(lov_verify[[1]])
# CTRL + ALT + C runs all code within a chunk
library(knitr)
library(kfigr)
library(httr)
library(plyr) # possibly use to cast children$form_values to a single data frame
library(dplyr)
library(tidyjson) # https://github.com/sailthru/tidyjson
library(jsonlite) # https://cran.r-project.org/web/packages/jsonlite/vignettes/json-aaquickstart.html
library(rJava)
library(xlsxjars)
#Set working directory and file paths
rm(list=ls())
options(stringsAsFactors = FALSE)
########################## EDIT THESE PATHS FOR YOUR OUTPUT FOLDER AND INPUT INGEST WORKBOOK ##########################
########################## EDIT THESE PATHS FOR YOUR OUTPUT FOLDER AND INPUT INGEST WORKBOOK ##########################
########################## EDIT THESE PATHS FOR YOUR OUTPUT FOLDER AND INPUT INGEST WORKBOOK ##########################
## Specify output file path
## Specify input ingest workbook file
if (file.exists(
"c:/Users/rregan")){
path_output <- "c:/Users/rregan/Desktop/FulcrumGit/devTOS/fulcrum/integration_tests/smammals"
path_devTOS <- "C:/Users/rregan/Desktop/FulcrumGit/devTOS"
}
if (file.exists(
"C:/Users/nrobinson")){
path_output <- "C:/Users/nrobinson/Desktop/MyDocuments/NEON_Git/devTOS/fulcrum/integration_tests/smammals"
path_devTOS <- "C:/Users/nrobinson/Desktop/MyDocuments/NEON_Git/devTOS"
}
if (file.exists(
"C:/Users/cflagg")){
path_output <- "C:/Users/cflagg/Documents/GitHub/devTOS/fulcrum/integration_tests/phenology"
path_devTOS <- "C:/Users/cflagg/Documents/GitHub/devTOS"
path_organismal <- "C:/Users/cflagg/Documents/GitHub/organismalIPT"
}
if (file.exists(
"C:/Users/kcawley")){
path_output <- "C:/Users/kcawley/Documents/GitHub/devTOS/fulcrum/integration_tests/smammals"
path_devTOS <- "C:/Users/kcawley/Documents/GitHub/devTOS"
}
# The ____folder name____ inside integration_tests
ingestWB <- read.delim(paste0(path_organismal,"/phenology/defData/phe_dataingest_NEONDOC001408.txt"), header = TRUE)
############## EDIT THESE CHARACTER VECTORS TO MATCH YOUR INGEST WORKBOOK NAME, FULCRM IDS, AND INGEST TABLE NAMES #######
############## EDIT THESE CHARACTER VECTORS TO MATCH YOUR INGEST WORKBOOK NAME, FULCRM IDS, AND INGEST TABLE NAMES #######
############## EDIT THESE CHARACTER VECTORS TO MATCH YOUR INGEST WORKBOOK NAME, FULCRM IDS, AND INGEST TABLE NAMES #######
###### specify fulcrum form_ids and ingest table names
# this should match the name of the ingest workbook .txt file
wbName <- c(rep("phe_dataingest_NEONDOC001408"))
# this should match the names of the ingest workbook tables
tableName <- c("phe_perindividual_in", "phe_statusintensity_in")
# this should match the fulcrum form_id of the apps that are INGESTED (apps that are not ingested should not be referenced here)
form_ids <- c("283a7c86-e453-438c-b02a-ac2a1ae531e9", "8299f45a-ae62-4084-880c-64fe0dfb03dd")
# this data.frame gets passed to the intcheck() function
workbookLocations <- data.frame(form_ids = c(form_ids),
wbName = wbName,
tableName = tableName)
################# EDIT THESE PATHS TO YOUR devTOS Fulcrum Folder -- source files contain functions #################
# Assign current ingestWB headers
source(paste(path_devTOS, "workbookWorkflow/checkAndPrintWB.R", sep = "/"))
# All API functions
source(paste(path_devTOS, "fulcrum/R_scripts/app_check.R", sep = "/")) ## functions that interact with the API
source(paste(path_devTOS, "fulcrum/R_scripts/integration_check.R", sep = "/")) ## functions that verify ingest workbook data
# check for case that path_output is not defined properly...
if ( ! exists("path_output")){ stop('path_output is not defined')}
# Grab the list of values from Christine's Shiny app -- this gets referenced by a function in 'integration_check'
lov <- read.csv(paste(path_output, "DPS_LOV_list_20170118.171150.csv", sep = "/"),
header = T, stringsAsFactors = F)
### JUST RUN THIS
api_token <- "f68fd4db05c32933b94e1760104cfdaa01eda4956c883943ab9fe55f2fb99313"
## intcheck does the following: (1) check and set global LOAD_ID/LOAD_STATUS JSON key, (2) maps the parserPaths, (3) checks the LOV
## (4) writes a new file with parserPaths for each ingest table ("withFulcrumKeys.txt")
ingesttables <- intcheck(input_df = workbookLocations, api_token, ingestWB, path_output, FALSE) # returns a list
## this will give you all of the LOV values listed in the ingest workbook -- currently does not check if LOVs are present in form schema
## the 'valid' column lists what the valid value is based on the Shiny app
## TODO: CURRENTLY DOESNT VERIFY IF THE APP LOV IS CORRECT, JUST LISTS THE LOV
lov_verify <- lovcheck(input_df = workbookLocations, api_token, ingestWB, path_output, FALSE, lov = lov)  # returns a list
# Collapse the list >> combine the separate files into one file
combined <- plyr::ldply(ingesttables)
# this re-combines all of the ingest tables into one file
write.table(combined, file = paste(path_output, "combined_ingest_withKeys.txt", sep = "/"),col.names=T, row.names=F, quote=T, na="",sep="\t",fileEncoding = "UTF-8")
# are any fields missing a parserPath?
missingFields <- dplyr::filter(combined, is.na(parserPath), fieldName != "uid") %>% select(table,fieldName, parserToCreate, entryValidationRulesParser, entryValidationRulesForm, entryLabelIfDifferentFromFieldName,parserPath)
# View it
View(missingFields)
## View the LOV
View(lov_verify[[1]])
# CTRL + ALT + C runs all code within a chunk
library(knitr)
library(kfigr)
library(httr)
library(plyr) # possibly use to cast children$form_values to a single data frame
library(dplyr)
library(tidyjson) # https://github.com/sailthru/tidyjson
library(jsonlite) # https://cran.r-project.org/web/packages/jsonlite/vignettes/json-aaquickstart.html
library(rJava)
library(xlsxjars)
#Set working directory and file paths
rm(list=ls())
options(stringsAsFactors = FALSE)
########################## EDIT THESE PATHS FOR YOUR OUTPUT FOLDER AND INPUT INGEST WORKBOOK ##########################
########################## EDIT THESE PATHS FOR YOUR OUTPUT FOLDER AND INPUT INGEST WORKBOOK ##########################
########################## EDIT THESE PATHS FOR YOUR OUTPUT FOLDER AND INPUT INGEST WORKBOOK ##########################
## Specify output file path
## Specify input ingest workbook file
if (file.exists(
"c:/Users/rregan")){
path_output <- "c:/Users/rregan/Desktop/FulcrumGit/devTOS/fulcrum/integration_tests/smammals"
path_devTOS <- "C:/Users/rregan/Desktop/FulcrumGit/devTOS"
}
if (file.exists(
"C:/Users/nrobinson")){
path_output <- "C:/Users/nrobinson/Desktop/MyDocuments/NEON_Git/devTOS/fulcrum/integration_tests/smammals"
path_devTOS <- "C:/Users/nrobinson/Desktop/MyDocuments/NEON_Git/devTOS"
}
if (file.exists(
"C:/Users/cflagg")){
path_output <- "C:/Users/cflagg/Documents/GitHub/devTOS/fulcrum/integration_tests/phenology"
path_devTOS <- "C:/Users/cflagg/Documents/GitHub/devTOS"
path_organismal <- "C:/Users/cflagg/Documents/GitHub/organismalIPT"
}
if (file.exists(
"C:/Users/kcawley")){
path_output <- "C:/Users/kcawley/Documents/GitHub/devTOS/fulcrum/integration_tests/smammals"
path_devTOS <- "C:/Users/kcawley/Documents/GitHub/devTOS"
}
# The ____folder name____ inside integration_tests
ingestWB <- read.delim(paste0(path_organismal,"/phenology/defData/phe_dataingest_NEONDOC001408.txt"), header = TRUE)
############## EDIT THESE CHARACTER VECTORS TO MATCH YOUR INGEST WORKBOOK NAME, FULCRM IDS, AND INGEST TABLE NAMES #######
############## EDIT THESE CHARACTER VECTORS TO MATCH YOUR INGEST WORKBOOK NAME, FULCRM IDS, AND INGEST TABLE NAMES #######
############## EDIT THESE CHARACTER VECTORS TO MATCH YOUR INGEST WORKBOOK NAME, FULCRM IDS, AND INGEST TABLE NAMES #######
###### specify fulcrum form_ids and ingest table names
# this should match the name of the ingest workbook .txt file
wbName <- c(rep("phe_dataingest_NEONDOC001408"))
# this should match the names of the ingest workbook tables
tableName <- c("phe_perindividual_in", "phe_statusintensity_in")
# this should match the fulcrum form_id of the apps that are INGESTED (apps that are not ingested should not be referenced here)
form_ids <- c("283a7c86-e453-438c-b02a-ac2a1ae531e9", "8299f45a-ae62-4084-880c-64fe0dfb03dd")
# this data.frame gets passed to the intcheck() function
workbookLocations <- data.frame(form_ids = c(form_ids),
wbName = wbName,
tableName = tableName)
################# EDIT THESE PATHS TO YOUR devTOS Fulcrum Folder -- source files contain functions #################
# Assign current ingestWB headers
source(paste(path_devTOS, "workbookWorkflow/checkAndPrintWB.R", sep = "/"))
# All API functions
source(paste(path_devTOS, "fulcrum/R_scripts/app_check.R", sep = "/")) ## functions that interact with the API
source(paste(path_devTOS, "fulcrum/R_scripts/integration_check.R", sep = "/")) ## functions that verify ingest workbook data
# check for case that path_output is not defined properly...
if ( ! exists("path_output")){ stop('path_output is not defined')}
# Grab the list of values from Christine's Shiny app -- this gets referenced by a function in 'integration_check'
lov <- read.csv(paste(path_output, "DPS_LOV_list_20170118.171150.csv", sep = "/"),
header = T, stringsAsFactors = F)
### JUST RUN THIS
api_token <- "f68fd4db05c32933b94e1760104cfdaa01eda4956c883943ab9fe55f2fb99313"
## intcheck does the following: (1) check and set global LOAD_ID/LOAD_STATUS JSON key, (2) maps the parserPaths, (3) checks the LOV
## (4) writes a new file with parserPaths for each ingest table ("withFulcrumKeys.txt")
ingesttables <- intcheck(input_df = workbookLocations, api_token, ingestWB, path_output, FALSE) # returns a list
## this will give you all of the LOV values listed in the ingest workbook -- currently does not check if LOVs are present in form schema
## the 'valid' column lists what the valid value is based on the Shiny app
## TODO: CURRENTLY DOESNT VERIFY IF THE APP LOV IS CORRECT, JUST LISTS THE LOV
lov_verify <- lovcheck(input_df = workbookLocations, api_token, ingestWB, path_output, FALSE, lov = lov)  # returns a list
# Collapse the list >> combine the separate files into one file
combined <- plyr::ldply(ingesttables)
# this re-combines all of the ingest tables into one file
write.table(combined, file = paste(path_output, "combined_ingest_withKeys.txt", sep = "/"),col.names=T, row.names=F, quote=T, na="",sep="\t",fileEncoding = "UTF-8")
# are any fields missing a parserPath?
missingFields <- dplyr::filter(combined, is.na(parserPath), fieldName != "uid") %>% select(table,fieldName, parserToCreate, entryValidationRulesParser, entryValidationRulesForm, entryLabelIfDifferentFromFieldName,parserPath)
# View it
View(missingFields)
## View the LOV
View(lov_verify[[1]])
